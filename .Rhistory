# Rename columns
seattle_wages <- seattle_wages %>%
rename(hourly_rate = `Hourly.Rate`,
job_title = `Job.Title`)
# Convert column names to lowercase
colnames(seattle_wages) <- tolower(colnames(seattle_wages))
# Calculate statistics for each department in a descending order
department_stats <- seattle_wages %>%
group_by(department) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
# Chunk 3
# Filter for departments with more than 100 employees
over_200_employees <- department_stats %>%
filter(count > 200) %>%
arrange(desc(mean_hourly_rate))
print(over_200_employees)
# Chunk 4
library(ggplot2)
# Create a bar chart of mean hourly rate by department
ggplot(over_200_employees, aes(x = reorder(department, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Department (Departments with >200 Employees)",
x = "Department",
y = "Mean Hourly Rate (USD)") +
theme_minimal()
# Chunk 5
# Filter the data for the "Information Technology" department
it_department <- seattle_wages %>%
filter(department == "Information Technology")
# Merge job titles and calculate the mean hourly rate for each job title
job_title_stats <- it_department %>%
group_by(job_title) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
print(job_title_stats)
# Chunk 6
# Filter for job titles with more than 5 count
filtered_job_title_stats <- job_title_stats %>%
filter(count > 5)
# Create a bar chart to compare mean hourly rate by job title
ggplot(filtered_job_title_stats, aes(x = reorder(job_title, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Job Title in IT Department",
x = "Job Title",
y = "Mean Hourly Rate (USD)") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
# Chunk 7
library(dplyr)
library(stringr)
library(ggplot2)
wage_InfoProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
select(job_title, hourly_rate) %>%
arrange(desc(mean_hourly_rate))
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message=FALSE, fig.height = 3)
library(tidyverse)
library(scales)
# Chunk 2
# Load the data
seattle_wages <- read.csv("../data/City_of_Seattle_Wage_Data_20240723.csv")
# Rename columns
seattle_wages <- seattle_wages %>%
rename(hourly_rate = `Hourly.Rate`,
job_title = `Job.Title`)
# Convert column names to lowercase
colnames(seattle_wages) <- tolower(colnames(seattle_wages))
# Calculate statistics for each department in a descending order
department_stats <- seattle_wages %>%
group_by(department) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
# Chunk 3
# Filter for departments with more than 100 employees
over_200_employees <- department_stats %>%
filter(count > 200) %>%
arrange(desc(mean_hourly_rate))
print(over_200_employees)
# Chunk 4
library(ggplot2)
# Create a bar chart of mean hourly rate by department
ggplot(over_200_employees, aes(x = reorder(department, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Department (Departments with >200 Employees)",
x = "Department",
y = "Mean Hourly Rate (USD)") +
theme_minimal()
# Chunk 5
# Filter the data for the "Information Technology" department
it_department <- seattle_wages %>%
filter(department == "Information Technology")
# Merge job titles and calculate the mean hourly rate for each job title
job_title_stats <- it_department %>%
group_by(job_title) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
print(job_title_stats)
# Chunk 6
# Filter for job titles with more than 5 count
filtered_job_title_stats <- job_title_stats %>%
filter(count > 5)
# Create a bar chart to compare mean hourly rate by job title
ggplot(filtered_job_title_stats, aes(x = reorder(job_title, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Job Title in IT Department",
x = "Job Title",
y = "Mean Hourly Rate (USD)") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
# Chunk 7
library(dplyr)
library(stringr)
library(ggplot2)
wage_InfoProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
select(job_title, hourly_rate) %>%
arrange(desc(hourly_rate))
# Histogram for Information Technology Professionals with normal distribution curve
p1 <- ggplot(wage_InfoProf, aes(x = hourly_rate)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "gold", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_InfoProf$hourly_rate, na.rm = TRUE),
sd = sd(wage_InfoProf$hourly_rate, na.rm = TRUE)),
color = "darkred", size = 1) +
labs(title = "Distribution of Hourly Rates for Information Technology Professionals",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message=FALSE, fig.height = 3)
library(tidyverse)
library(scales)
# Chunk 2
# Load the data
seattle_wages <- read.csv("../data/City_of_Seattle_Wage_Data_20240723.csv")
# Rename columns
seattle_wages <- seattle_wages %>%
rename(hourly_rate = `Hourly.Rate`,
job_title = `Job.Title`)
# Convert column names to lowercase
colnames(seattle_wages) <- tolower(colnames(seattle_wages))
# Calculate statistics for each department in a descending order
department_stats <- seattle_wages %>%
group_by(department) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
# Chunk 3
# Filter for departments with more than 100 employees
over_200_employees <- department_stats %>%
filter(count > 200) %>%
arrange(desc(mean_hourly_rate))
print(over_200_employees)
# Chunk 4
library(ggplot2)
# Create a bar chart of mean hourly rate by department
ggplot(over_200_employees, aes(x = reorder(department, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Department (Departments with >200 Employees)",
x = "Department",
y = "Mean Hourly Rate (USD)") +
theme_minimal()
# Chunk 5
# Filter the data for the "Information Technology" department
it_department <- seattle_wages %>%
filter(department == "Information Technology")
# Merge job titles and calculate the mean hourly rate for each job title
job_title_stats <- it_department %>%
group_by(job_title) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
print(job_title_stats)
# Chunk 6
# Filter for job titles with more than 5 count
filtered_job_title_stats <- job_title_stats %>%
filter(count > 5)
# Create a bar chart to compare mean hourly rate by job title
ggplot(filtered_job_title_stats, aes(x = reorder(job_title, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Job Title in IT Department",
x = "Job Title",
y = "Mean Hourly Rate (USD)") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
# Chunk 7
library(dplyr)
library(stringr)
library(ggplot2)
wage_InfoProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
select(job_title, hourly_rate) %>%
arrange(desc(hourly_rate))
# Histogram for Information Technology Professionals with normal distribution curve
p1 <- ggplot(wage_InfoProf, aes(x = hourly_rate)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "gold", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_InfoProf$hourly_rate, na.rm = TRUE),sd = sd(wage_InfoProf$hourly_rate, na.rm = TRUE)), color = "darkred", size = 1) +labs(title = "Distribution of Hourly Rates for Information Technology Professionals",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message=FALSE, fig.height = 3)
library(tidyverse)
library(scales)
# Chunk 2
# Load the data
seattle_wages <- read.csv("../data/City_of_Seattle_Wage_Data_20240723.csv")
# Rename columns
seattle_wages <- seattle_wages %>%
rename(hourly_rate = `Hourly.Rate`,
job_title = `Job.Title`)
# Convert column names to lowercase
colnames(seattle_wages) <- tolower(colnames(seattle_wages))
# Calculate statistics for each department in a descending order
department_stats <- seattle_wages %>%
group_by(department) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
# Chunk 3
# Filter for departments with more than 100 employees
over_200_employees <- department_stats %>%
filter(count > 200) %>%
arrange(desc(mean_hourly_rate))
print(over_200_employees)
# Chunk 4
library(ggplot2)
# Create a bar chart of mean hourly rate by department
ggplot(over_200_employees, aes(x = reorder(department, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Department (Departments with >200 Employees)",
x = "Department",
y = "Mean Hourly Rate (USD)") +
theme_minimal()
# Chunk 5
# Filter the data for the "Information Technology" department
it_department <- seattle_wages %>%
filter(department == "Information Technology")
# Merge job titles and calculate the mean hourly rate for each job title
job_title_stats <- it_department %>%
group_by(job_title) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
print(job_title_stats)
# Chunk 6
# Filter for job titles with more than 5 count
filtered_job_title_stats <- job_title_stats %>%
filter(count > 5)
# Create a bar chart to compare mean hourly rate by job title
ggplot(filtered_job_title_stats, aes(x = reorder(job_title, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Job Title in IT Department",
x = "Job Title",
y = "Mean Hourly Rate (USD)") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
# Chunk 7
library(dplyr)
library(stringr)
library(ggplot2)
wage_InfoProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
select(job_title, hourly_rate) %>%
arrange(desc(hourly_rate))
# Histogram for Information Technology Professionals with normal distribution curve
p1 <- ggplot(wage_InfoProf, aes(x = hourly_rate)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "gold", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_InfoProf$hourly_rate, na.rm = TRUE),sd = sd(wage_InfoProf$hourly_rate, na.rm = TRUE)), color = "darkred", size = 1) +labs(title = "Distribution of Hourly Rates for Information Technology Professionals",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p1)
# Chunk 8
library(dplyr)
library(stringr)
library(ggplot2)
wage_StratAdvsr <- it_department %>%
filter(str_detect(job_title, "StratAdvsr")) %>%
group_by(job_title) %>%
arrange(desc(hourly_rate))
# Histogram for Strategy Advisors with normal distribution curve
p2 <- ggplot(wage_StratAdvsr, aes(x = hourly_rate)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_StratAdvsr$hourly_rate, na.rm = TRUE),
sd = sd(wage_StratAdvsr$hourly_rate, na.rm = TRUE)),
color = "darkred", size = 1) +
labs(title = "Distribution of Hourly Rates for Strategy Advisors",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message=FALSE, fig.height = 3)
library(tidyverse)
library(scales)
# Chunk 2
# Load the data
seattle_wages <- read.csv("../data/City_of_Seattle_Wage_Data_20240723.csv")
# Rename columns
seattle_wages <- seattle_wages %>%
rename(hourly_rate = `Hourly.Rate`,
job_title = `Job.Title`)
# Convert column names to lowercase
colnames(seattle_wages) <- tolower(colnames(seattle_wages))
# Calculate statistics for each department in a descending order
department_stats <- seattle_wages %>%
group_by(department) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
# Chunk 3
# Filter for departments with more than 100 employees
over_200_employees <- department_stats %>%
filter(count > 200) %>%
arrange(desc(mean_hourly_rate))
print(over_200_employees)
# Chunk 4
library(ggplot2)
# Create a bar chart of mean hourly rate by department
ggplot(over_200_employees, aes(x = reorder(department, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Department (Departments with >200 Employees)",
x = "Department",
y = "Mean Hourly Rate (USD)") +
theme_minimal()
# Chunk 5
# Filter the data for the "Information Technology" department
it_department <- seattle_wages %>%
filter(department == "Information Technology")
# Merge job titles and calculate the mean hourly rate for each job title
job_title_stats <- it_department %>%
group_by(job_title) %>%
summarise(
count = n(),
mean_hourly_rate = mean(hourly_rate, na.rm = TRUE),
median_hourly_rate = median(hourly_rate, na.rm = TRUE),
) %>%
arrange(desc(mean_hourly_rate))
print(job_title_stats)
# Chunk 6
# Filter for job titles with more than 5 count
filtered_job_title_stats <- job_title_stats %>%
filter(count > 5)
# Create a bar chart to compare mean hourly rate by job title
ggplot(filtered_job_title_stats, aes(x = reorder(job_title, mean_hourly_rate), y = mean_hourly_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Mean Hourly Rate by Job Title in IT Department",
x = "Job Title",
y = "Mean Hourly Rate (USD)") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
# Chunk 7
library(dplyr)
library(stringr)
library(ggplot2)
wage_InfoProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
select(job_title, hourly_rate) %>%
arrange(desc(hourly_rate))
# Histogram for Information Technology Professionals with normal distribution curve
p1 <- ggplot(wage_InfoProf, aes(x = hourly_rate)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "gold", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_InfoProf$hourly_rate, na.rm = TRUE), sd = sd(wage_InfoProf$hourly_rate, na.rm = TRUE)), color = "darkred", linewidth = 1) +
labs(title = "Distribution of Hourly Rates for Information Technology Professionals",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p1)
# Chunk 8
library(dplyr)
library(stringr)
library(ggplot2)
wage_StratAdvsr <- it_department %>%
filter(str_detect(job_title, "StratAdvsr")) %>%
group_by(job_title) %>%
arrange(desc(hourly_rate))
# Histogram for Strategic Advisors with normal distribution curve
p2 <- ggplot(wage_StratAdvsr, aes(x = hourly_rate)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "blue", color = "black") +
stat_function(fun = dnorm, args = list(mean = mean(wage_StratAdvsr$hourly_rate, na.rm = TRUE), sd = sd(wage_StratAdvsr$hourly_rate, na.rm = TRUE)), color = "darkred", linewidth = 1) +
labs(title = "Distribution of Hourly Rates for Strategic Advisors",
x = "Hourly Rate",
y = "Density") +
theme_minimal()
print(p2)
# Chunk 9
library(dplyr)
library(stringr)
library(ggplot2)
# Calculate the median hourly rate for the IT department
median_hourly_rate <- median(it_department$hourly_rate, na.rm = TRUE)
# Create a binary variable indicating high earners
it_department <- it_department %>%
mutate(high_earner = if_else(hourly_rate > median_hourly_rate, 1, 0))
# Separate data for Information Technology Professionals and Strategic Advisors
it_prof <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof"))
strat_advsrs <- it_department %>%
filter(str_detect(job_title, "StratAdvsr"))
# Calculate number of high earners and total for each group
n_info_prof <- nrow(it_prof)
n_strat_advsrs <- nrow(strat_advsrs)
x_info_prof <- sum(it_prof$high_earner)
x_strat_advsrs <- sum(strat_advsrs$high_earner)
# Proportions of high earners
prop_info_prof <- x_info_prof / n_info_prof
prop_strat_advsrs <- x_strat_advsrs / n_strat_advsrs
# Chunk 10
# Function to compute Agresti-Coull Confidence Interval
agresti_coull <- function(successes, trials, confidence_level = 0.95) {
p_hat <- successes / trials
z <- qnorm((1 + confidence_level) / 2)
n <- trials
center <- (p_hat + z^2 / (2 * n)) / (1 + z^2 / n)
margin <- z * sqrt((p_hat * (1 - p_hat) + z^2 / (4 * n)) / n) / (1 + z^2 / n)
lower <- center - margin
upper <- center + margin
return(c(lower, upper))
}
# Compute Agresti-Coull Confidence Intervals
ci_info_prof <- agresti_coull(x_info_prof, n_info_prof)
ci_strat_advsrs <- agresti_coull(x_strat_advsrs, n_strat_advsrs)
# Chunk 11
# Perform two-proportion z-test
prop_test <- prop.test(c(x_info_prof, x_strat_advsrs), c(n_info_prof, n_strat_advsrs))
# Confidence intervals for high earners in each group
binom_test_info_prof <- binom.test(x_info_prof, n_info_prof, conf.level = 0.95)
binom_test_strat_advsrs <- binom.test(x_strat_advsrs, n_strat_advsrs, conf.level = 0.95)
# Chunk 12
# Subset data for Strategic Advisors and Information Technology Professionals
wage_ITProf <- it_department %>%
filter(str_detect(job_title, "Info Technol Prof")) %>%
pull(hourly_rate)
wage_StratAdvsr <- it_department %>%
filter(str_detect(job_title, "StratAdvsr")) %>%
pull(hourly_rate)
# Perform a one-sided two-sample t-test
t_test_result <- t.test(wage_StratAdvsr, wage_ITProf, alternative = "greater", var.equal = FALSE)
View(t_test_result)
View(t_test_result)
View(t_test_result)
t_test_result[["p.value"]]
